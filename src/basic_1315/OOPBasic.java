package basic_1315;
/**
 * Object-Oriented-Programing(객체지향프로그래밍)
 * 클래스와 객체
 * 인스턴스 란?
 * 변수의 종류
 * 메서드 - 선언, return, 매개변수
 * @author SangJun
 *
 */
public class OOPBasic {
		/*
		 * 1. 객체지향언어
		 * - 기존의 프로그래밍 언어에 몇가지 새로운 규칙을 추가한 보다 발전된 형태이다.
		 * - 규칙성을 이용해서 코드간에 서로 관계를 맺어줌으로써 보다 유기적으로 프로그램을 구성한다.
		 * - 객체지향언어의 특징
		 * 	: 코드의 재사용성이 높다
		 * 	: 코드의 관리가 용이하다
		 * 	: 신뢰성이 높은 프로그래밍을 가능하게 한다
		 * 
		 * 2. 클래스와 객체
		 * 	1) 클래스란?
		 * 		: 객체를 정의해 놓은것
		 * 		: 객체의 설계도 또는 틀이다
		 * 		
		 * 		클래스		객체
		 * 		제품설계도	제품
		 * 		TV설계도	TV
		 * 		붕어빵기계	붕어빵
		 * 
		 * 		- 클래스의 선언
		 * 		[접근제어자][지정예약어] class 클래스명 [extends 클래스][implements 인터페이스]{}
		 * 			public		abstract	class	Child	extends Parent	implements Serializable{}
		 * 
		 * 	2) 객체란?
		 * 		: 실제로 존재하는 것, 사물 또는 개념
		 * 		: TV
		 * 
		 * 		- 객체의 구성요소
		 * 			: 속성(멤버변수, 특성, 필드, 상태)
		 * 				크기, 길이, 높이, 색상, 볼륨, 채널...
		 * 			: 기능(메서드, 행위, 함수)
		 * 				켜기, 끄기, 볼륨높이기...
		 * 
		 * 3. 인스턴스란?
		 * 	: 클래스로부토 객체를 만드는 과정을 "클래스의 인스턴스화" 라고 한다.
		 * 	: TV클래스로 부터 만들어진 객체를 TV클래스의 인스턴스라고 한다.
		 * 	- 인스턴스 생성방법
		 * 		Scanner sc = new Scanner();
		 * 		클래스명 참조변수명 = new 클래스명();
		 * 
		 * 	- 인스턴스는 참조변수를 통해서만 다룰수 있으며,
		 * 		참조변수의 타입은 인스턴스의 타입과 일치해야 한다
		 * 
		 * 4. 선언위치에 따른 변수의 종류
		 *  - 전역변수(클래스 변수, 인스턴스 변수), 지역변수
		 *  - 인스턴스 변수
		 *  	: 클래스의 영역에 선언되며, 클래스의 인스턴스를 생성할 때 만들어 진다.
		 *  	: 인스턴스 변수의 값을 읽어 오거나 저장하기 위해서는 인스턴스화를 진행해야 한다
		 *  	: 인스턴스는 독립적인 공간을 가지므로 서로 다른 값을 가질 수 있다.
		 *  		그러므로 인스턴스마다 고유한 상태를 유지해야 하는 속성의 경우 인스턴스 변수로 선언해야 한다
		 *  - 클래스 변수
		 *  	: 모든 인스턴스가 공통된 저장공간(변수)를 공유하게 된다.
		 *  	: 한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야 하는 경우 클래스 변수로 선언한다.
		 *  	: 인스턴스 변수 앞에 static만 붙이기만 하면 된다.
		 *  - 지역변수
		 *  	: 메서드내에 선언되며 메서드 내에서만 사용 가능하다.
		 *  	: 메서드 종료시 소멸된다
		 *  	: for문 또는 while문의 블럭내에서 선언된 지역변수는 블럭내에서만 사용가능하다.
		 *  
		 * 5. 메서드
		 * 	- 어떠한 작업을 수행하기 위한 명령문의 집합
		 * 	- 주로 어떤 값들을 입력받아서 처리하고 그 결과를 돌려준다
		 * 	- 반환값이 있을수도 반환하지 않을수도 있다
		 * 	- 반복적으로 사용되는 코드를 줄이기 위해서 사용된다
		 *  
		 *  리턴타입 메서드명(매개변수) : 메서드의 선언부
		 *  {} : 메서드의 구현부
		 *  - 작성방법
		 *  	리턴타입 메서드명(변수타입 변수명, 변수타입 변수명,...){
		 *  		//수행될 코드
		 *  	}
		 */
		int add(int a, int b){// int a, int b : 매개변수(지역변수)// a, b : 인자값
			int result = a + b;
			
			if(a==0){
				return 0;
			}	
			return result;
		}
		
		/*
		 * 6. return문
		 * 	- 메서드가 정상적으로 종료되는 경우
		 * 		: 메서드의 블럭{}내의 마지막까지 수행하였을때
		 * 		: 메서드의 블럭{}내에서 return문을 만났을때
		 * 	- 반환값
		 * 		: 반환값이 없는 경우 리턴타입을 void로 주거나 또는 return;
		 * 		: 반환값이 있는 경우 return 반환값;
		 * 	- 메서드의 타입과 return문의 반환값의 타입이 일치해야 한다.
		 * 
		 * 7. 매개변수
		 * 	- 메서드를 호출할 때는 매개변수로 지정한 값을 메서드의 매개변수에 복사해서 넘겨준다
		 *  - 기본형 매개변수
		 *  	: 단순히 값만을 복사한다
		 *  	: 변수의 값을 읽기만 할 수 있다
		 *  - 참조형 매개변수
		 * 		: 인스턴스의 주소가 복사된다
		 * 		: 변수의 값을 읽고 변경할 수 있다	
		 * 
		 * 
		 */
		
		
		
		
		
		
		
		
		
		
		
		
		
		
}
